diff -Naur mythtv-master-20210518-gc8c226c9b4-old/mythtv/programs/mythbackend/upnpcdsmusic.cpp mythtv-master-20210518-gc8c226c9b4-new/mythtv/programs/mythbackend/upnpcdsmusic.cpp
--- mythtv-master-20210518-gc8c226c9b4-old/mythtv/programs/mythbackend/upnpcdsmusic.cpp	2021-05-18 16:11:33.526666604 +0200
+++ mythtv-master-20210518-gc8c226c9b4-new/mythtv/programs/mythbackend/upnpcdsmusic.cpp	2021-05-18 16:11:36.749999938 +0200
@@ -29,7 +29,9 @@
  *     + <Track 2>                   Music/Track=2
  *     + <Track 3>                   Music/Track=3
  *
- *   - PlayLists                     // TODO
+ *   - PlayList                      Music/Playlist
+ *     - <Playlist 1>                Music/Playlist=5
+ *       + <Track 1>                 Music/Playlist=5/Track=1
  *
  *   - By Artist                     Music/Artist
  *     - <Artist 1>                  Music/Artist=123
@@ -68,6 +70,7 @@
     // ShortCuts
     m_shortcuts.insert(UPnPShortcutFeature::MUSIC, "Music");
     m_shortcuts.insert(UPnPShortcutFeature::MUSIC_ALL, "Music/Track");
+    m_shortcuts.insert(UPnPShortcutFeature::MUSIC_PLAYLISTS, "Music/Playlist");
     m_shortcuts.insert(UPnPShortcutFeature::MUSIC_ALBUMS, "Music/Album");
     m_shortcuts.insert(UPnPShortcutFeature::MUSIC_ARTISTS, "Music/Artist");
     m_shortcuts.insert(UPnPShortcutFeature::MUSIC_GENRES, "Music/Genre");
@@ -112,6 +115,20 @@
     m_pRoot->AddChild(pContainer);
 
     // -----------------------------------------------------------------------
+    // Playlists
+    // -----------------------------------------------------------------------
+    pContainer = CDSObject::CreateContainer ( containerId.arg("Playlist"),
+                                              QObject::tr("Playlist"),
+                                              m_sExtensionId, // Parent Id
+                                              NULL );
+    // HACK
+    LoadPlaylists(pRequest, pResult, tokens);
+    pContainer->SetChildCount(pResult->m_nTotalMatches);
+    pContainer->SetChildContainerCount(pResult->m_nTotalMatches);
+    // END HACK
+    m_pRoot->AddChild(pContainer);
+
+    // -----------------------------------------------------------------------
     // By Artist
     // -----------------------------------------------------------------------
     pContainer = CDSObject::CreateContainer ( containerId.arg("Artist"),
@@ -298,6 +315,13 @@
         // the ids for filtering
         return LoadGenres(pRequest, pResults, tokens);
     }
+    if (currentToken == "playlist")
+    {
+        // Playlist is presently a top tier node, since it doesn't appear
+        // below Artist/Album/etc we don't need to pass through
+        // the ids for filtering
+        return LoadPlaylists(pRequest, pResults, tokens);
+    }
     if (currentToken == "artist")
     {
         return LoadArtists(pRequest, pResults, tokens);
@@ -342,6 +366,13 @@
             return LoadArtists(pRequest, pResults, tokens);
         return LoadGenres(pRequest, pResults, tokens);
     }
+    else if (currentToken == "playlist")
+    {
+        if (tokens["playlist"].toInt() > 0)
+            return LoadTracks(pRequest, pResults, tokens);
+        else
+            return LoadPlaylists(pRequest, pResults, tokens);
+    }
     if (currentToken == "artist")
     {
         if (tokens["artist"].toInt() > 0)
@@ -703,6 +734,77 @@
 //
 /////////////////////////////////////////////////////////////////////////////
 
+bool UPnpCDSMusic::LoadPlaylists(const UPnpCDSRequest *pRequest,
+                              UPnpCDSExtensionResults *pResults,
+                              IDTokenMap tokens )
+{
+    QString sRequestId = pRequest->m_sObjectId;
+
+    uint16_t nCount = pRequest->m_nRequestedCount;
+    uint16_t nOffset = pRequest->m_nStartingIndex;
+
+    // We must use a dedicated connection to get an acccurate value from
+    // FOUND_ROWS()
+    MSqlQuery query(MSqlQuery::InitCon(MSqlQuery::kDedicatedConnection));
+
+    QString sql = "SELECT SQL_CALC_FOUND_ROWS p.playlist_id, p.playlist_name, "
+                  "COUNT( 1 ) "
+                  "FROM music_playlists p "
+                  "WHERE p.playlist_name NOT LIKE '%storage' "
+                  "%1 " // WHERE clauses
+                  "GROUP BY p.playlist_id "
+                  "ORDER BY p.playlist_name "
+                  "LIMIT :OFFSET,:COUNT";
+
+    QStringList clauses;
+    QString whereString = BuildWhereClause(clauses, tokens);
+
+    query.prepare(sql.arg(whereString));
+
+    BindValues(query, tokens);
+
+    query.bindValue(":OFFSET", nOffset);
+    query.bindValue(":COUNT", nCount);
+
+    if (!query.exec())
+        return false;
+
+    while (query.next())
+    {
+        int nPlaylistId = query.value(0).toInt();
+        QString sPlaylistName = query.value(1).toString();
+        int nPlaylistCount = query.value(2).toInt();
+
+        CDSObject* pContainer = CDSObject::CreatePlaylistContainer( CreateIDString(sRequestId, "Playlist", nPlaylistId),
+                                                             sPlaylistName,
+                                                             pRequest->m_sParentId,
+                                                             NULL );
+        pContainer->SetPropValue("description", sPlaylistName);
+
+        pContainer->SetChildCount(nPlaylistCount);
+        pContainer->SetChildContainerCount(nPlaylistCount);
+
+        pResults->Add(pContainer);
+        pContainer->DecrRef();
+    }
+
+    // Just in case FOUND_ROWS() should fail, ensure m_nTotalMatches contains
+    // at least the size of this result set
+    if (query.size() > 0)
+        pResults->m_nTotalMatches = query.size();
+
+    // Fetch the total number of matches ignoring any LIMITs
+    query.prepare("SELECT FOUND_ROWS()");
+    if (query.exec() && query.next())
+            pResults->m_nTotalMatches = query.value(0).toUInt();
+
+    return true;
+}
+
+/////////////////////////////////////////////////////////////////////////////
+//
+/////////////////////////////////////////////////////////////////////////////
+
 bool UPnpCDSMusic::LoadTracks(const UPnpCDSRequest *pRequest,
                               UPnpCDSExtensionResults *pResults,
                               const IDTokenMap& tokens)
@@ -726,15 +828,27 @@
                   "LEFT JOIN music_albums a ON a.album_id = s.album_id "
                   "LEFT JOIN music_genres g ON  g.genre_id = s.genre_id "
                   "LEFT JOIN music_albumart w ON s.song_id = w.song_id "
+                  "%3 " // playlist JOIN
                   "%1 " // WHERE clauses
                   "GROUP BY s.song_id "
-                  "ORDER BY t.artist_name, a.album_name, s.track "
+                  "%2 " // ORDER clauses
                   "LIMIT :OFFSET,:COUNT";
 
     QStringList clauses;
     QString whereString = BuildWhereClause(clauses, tokens);
+    QString orderString = "";
+    QString joinString = "";
 
-    query.prepare(sql.arg(whereString));
+    if (tokens["playlist"].toInt() > 0)
+    {
+        orderString = "ORDER BY FIND_IN_SET(s.song_id, p.playlist_songs) ";
+        joinString = "LEFT JOIN music_playlists p on FIND_IN_SET(s.song_id, p.playlist_songs) ";
+    }
+    else
+    {
+        orderString = "ORDER BY t.artist_name, a.album_name, s.track ";
+    }
+    query.prepare(sql.arg(whereString).arg(orderString).arg(joinString));
 
     BindValues(query, tokens);
 
@@ -846,6 +960,8 @@
 {
     if (tokens["track"].toInt() > 0)
         clauses.append("s.song_id=:TRACK_ID");
+    if (tokens["playlist"].toInt() > 0)
+        clauses.append("playlist_id=:PLAYLIST_ID");
     if (tokens["album"].toInt() > 0)
         clauses.append("s.album_id=:ALBUM_ID");
     if (tokens["artist"].toInt() > 0)
@@ -881,6 +997,8 @@
 {
     if (tokens["track"].toInt() > 0)
         query.bindValue(":TRACK_ID", tokens["track"]);
+    if (tokens["playlist"].toInt() > 0)
+        query.bindValue(":PLAYLIST_ID", tokens["playlist"]);
     if (tokens["album"].toInt() > 0)
         query.bindValue(":ALBUM_ID", tokens["album"]);
     if (tokens["artist"].toInt() > 0)
diff -Naur mythtv-master-20210518-gc8c226c9b4-old/mythtv/programs/mythbackend/upnpcdsmusic.h mythtv-master-20210518-gc8c226c9b4-new/mythtv/programs/mythbackend/upnpcdsmusic.h
--- mythtv-master-20210518-gc8c226c9b4-old/mythtv/programs/mythbackend/upnpcdsmusic.h	2021-05-18 16:11:33.526666604 +0200
+++ mythtv-master-20210518-gc8c226c9b4-new/mythtv/programs/mythbackend/upnpcdsmusic.h	2021-05-18 16:11:36.749999938 +0200
@@ -61,6 +61,9 @@
         bool             LoadTracks(const UPnpCDSRequest *pRequest,
                                     UPnpCDSExtensionResults *pResults,
                                     const IDTokenMap& tokens);
+        bool             LoadPlaylists(const UPnpCDSRequest *pRequest,
+                                    UPnpCDSExtensionResults *pResults,
+                                    IDTokenMap tokens);
 
         // Common code helpers
         static QString BuildWhereClause( QStringList clauses,
